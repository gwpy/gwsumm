#!/usr/bin/env python

"""Script to plot h(t) triggers for some epoch
"""

__author__ = "Duncan Macleod <duncan.macleod@ligo.org>"

import argparse
import os
import re
from multiprocessing import cpu_count

from collections import OrderedDict

from matplotlib import use
use('agg')

from gwpy.time import to_gps

from gwsumm import globalv
from gwsumm.utils import vprint
from gwsumm.archive import (write_data_archive, read_data_archive)
from gwsumm.config import (DEFAULTSECT, GWSummConfigParser)
from gwsumm.data import get_timeseries
from gwsumm.state import generate_all_state
from gwsumm.tabs import GuardianTab

GWSummConfigParser.OPTCRE = re.compile(
    r'(?P<option>[^=\s][^=]*)\s*(?P<vi>[=])\s*(?P<value>.*)$')

DEFAULT_NPROC = min(8, cpu_count())


def safe_eval(val):
    """Evaluate the given string as a line of python, if possible

    If the :meth:`eval` fails, a `str` is returned in stead.
    """
    try:
        return eval(val)
    except (NameError, SyntaxError):
        return str(val)


# -----------------------------------------------------------------------------
# Read command line

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('node')
parser.add_argument('gpsstart', type=to_gps)
parser.add_argument('gpsend', type=to_gps)
parser.add_argument('config', help='config-file defining guardian node')
parser.add_argument('-i', '--ifo', default='L1')
parser.add_argument('-t', '--epoch', type=to_gps,
                    help='Zero-time for plot, defaults to GPSSTART')
parser.add_argument('-p', '--plot-params', action='append', default=[],
                    help='extra plotting keyword argument')
parser.add_argument('-m', '--multi-process', type=int, default=DEFAULT_NPROC,
                    dest='nproc',
                    help='number of processes to use, default: %(default)s')
parser.add_argument('-o', '--output-file', default='trigs.png',
                    help='output file name, default: %(default)s')
parser.add_argument('-v', '--verbose', action='store_true',
                    help='print verbose output, default: False')
parser.add_argument('-P', '--profile', action='store_true',
                    help='print timing output, default: False')
archopts = parser.add_mutually_exclusive_group()
archopts.add_argument('-a', '--archive',
                      help='full path of HDF archive for data')
archopts.add_argument('-r', '--read-only-archive',
                      help='full path of HDF archive for data, does not write')

args = parser.parse_args()
if args.epoch is None:
    args.epoch = args.gpsstart
globalv.VERBOSE = args.verbose
globalv.PROFILE = args.profile
state = generate_all_state(args.gpsstart, args.gpsend)

# format params
params = {}
for input_ in args.plot_params:
    key, val = input_.split('=', 1)
    params[key.strip('-')] = safe_eval(val)

# read config
config = GWSummConfigParser(dict_type=OrderedDict)
config.read(args.config)
config.set(DEFAULTSECT, 'gps-start-time', str(int(args.gpsstart)))
config.set(DEFAULTSECT, 'gps-end-time', str(int(args.gpsend)))
config.set(DEFAULTSECT, 'ifo', args.ifo)
sec = 'tab-%s' % args.node

# read archive
if args.archive or args.read_only_archive:
    read_data_archive(args.archive or args.read_only_archive)
    vprint("Read data archive from %s\n"
           % args.archive or args.rad_only_archive)

# make tab
tab = GuardianTab.from_ini(config, sec, mode='gps', path='.', plotdir='.')
tab.plots = tab.plots[:1]
tab.plots[0].pargs.update(params)
tab.plots[0].pargs['epoch'] = args.epoch

# process
vprint("Processing:\n")
tab.process(multiprocess=args.nproc)
plotfile = tab.plots[0].outputfile
os.rename(plotfile, args.output_file)
vprint('Plot saved to %s\n' % args.output_file)

# crop and save archive
if args.archive:
    for channel in globalv.DATA:
        globalv.DATA[channel] = get_timeseries(channel, state, query=False)
    write_data_archive(args.archive)
    vprint("Archive recorded as %s\n" % args.archive)
